«REM»
C) Copyright 2011 CSI-PIEMONTE;

Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.
E' possibile ottenere una copia della Licenza al seguente indirizzo:

http://www.eupl.it/opensource/eupl-1-1

Salvo diversamente indicato dalla legge applicabile o concordato per
iscritto, il software distribuito secondo i termini della Licenza e'
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,
esplicite o implicite.
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni
e le limitazioni secondo i termini della Licenza.
«ENDREM»

«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»
«IMPORT appresources»

«EXTENSION template::ServicegenExtensions»
«EXTENSION template::cxf::ServicegenCxfExtensions»

«REM»
********************************
creazione del build.xml per ANT
********************************
«ENDREM»
«DEFINE buildfile FOR SOABEModel»
	«EXPAND buildXmlFile FOR this»
	«REM»«EXPAND buildJavadocXmlFile FOR this»«ENDREM»
«ENDDEFINE»


«DEFINE buildXmlFile FOR SOABEModel»
«FILE "build.xml"»<?xml version="1.0" encoding="UTF-8"?>

<!-- ##################################################### -->
<!-- # build.xml file per compilazione e generazione     # -->
<!-- # del pacchetto per il rilascio dell'applicazione.  # -->
<!-- #                                                   # -->
<!-- # Per una lista completa dei tasks eseguibili usare # -->
<!-- # l'argomento di ant -projecthelp quando si         # -->
<!-- # richiama questo build.xml.                        # -->
<!-- ##################################################### -->

<project basedir="."
         default="default"
         name="«codComponente.toLowerCase()»"
         xmlns:ivy="antlib:fr.jayasoft.ivy.ant" >

	<description>Build file per il progetto: [«codComponente.toLowerCase()»]</description>

	<!-- -->
	<echo message="Loading build properties..." />
	<property file="buildfiles/build.properties" />
	<property file="buildfiles/build.locale.properties" />
	<property file="buildfiles/${target}.properties" />

	<!-- -->
	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: init                                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="init" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="dev">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/classes" />
		<mkdir dir="${temp}/${target}/${earLib}" />
		<mkdir dir="${build}/archives/${target}" />
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
		<mkdir dir="${build}/cache" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: default                                           # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="default"
	        description="Eseguire il build per l'environment
	                     specificato a linea di comando con
	                     -Dtarget=${target} o per tutti gli
	                     environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="server: ${server}" />
		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: all-targets                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="all-targets"
	        description="Esegue il build per le varie distribuzioni in sequenza.">
		«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID("build.all-targets")»
		<!-- Inserire le varie distribuzioni di cui si intende eseguire il build. -->
		<antcall target="distribution" />
		«ENDPROTECT»
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [DISTRIB]: distribution                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="distribution" depends="package-all"
	        description="Costruisce il tar per la distribuzione." >
		<echo message="====== Creating distribution for ${target} ..."/>
		<echo message="====== Basedir: ${build}/archives/${target} ..."/>
		«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID(codComponente+"package-all-extraantcall")»
		<!-- inserire qui eventuali statement antcall aggiuntivi da invocare
		     nel processo di distribuzione del tar -->
		«ENDPROTECT»
		<tar tarfile="${dist}/${target}/${dist-file-name}.tar"
		     basedir="${build}/archives/${target}"
		     includes="*.ear,*.xml">
			<tarfileset dir="buildfiles">
				<include name="readme.txt"/>
				«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID(codComponente+"package-all-extraincludes")»
				<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
				«ENDPROTECT»
			</tarfileset>
		</tar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: resolve-dependencies                               # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="resolve-dependencies"
	        description="carica le librerie dal repository remoto">
		<ivy:configure file="${basedir}/buildfiles/ivyconf.xml" />
		<ivy:resolve file="${basedir}/buildfiles/ivy.xml" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [IVY]: internal target: load-dependencies                 # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="load-dependencies"
	        depends="resolve-dependencies"
	        description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="${basedir}/lib/[artifact].[type]" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: compile-all                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="compile-all" depends="init,load-dependencies"
	        description="Compila tutti i sorgenti.">

		<echo message="===> Target: ${target}" />

		<!-- compilazione dei sorgenti -->
		<javac srcdir="${src}/java" destdir="${build}/classes"
		       optimize="on" deprecation="on"
		       compiler="modern"
		       debug="on" debuglevel="lines,vars,source">
			<classpath refid="library.ref" />
		</javac>

		<!-- copia dei sorgenti -->
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-recreate                              # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-recreate"
	        description="Ricrea l&apos;environment di configurazione per il target corrente (per applicare le sostituzionidelle variabili).">
		<mkdir dir="build/temp/conf" />
			<copy todir="build/temp/conf" overwrite="true">
		<fileset dir="${conf}" />
		</copy>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: environment-config                                # -->
	<!-- #         Gestire qui i  replace delle variabile d'ambiente # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="environment-config"
	        description="Predispone le configurazioni dipendenti dall&apos;ambiente." >
	       		<!-- gestone variabili WS-Security -->
		
		«FOREACH this.serviceimplementations AS impl»
	    «IF !impl.provides.bindings.isEmpty-»
	    «LET (WSBinding)impl.provides.bindings.get(0) AS wsBinding-»	
		«IF !wsBinding.endpoints.isEmpty-»
		«FOREACH ((WSBinding)wsBinding).endpoints AS endpoint-»
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.password.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.password.«endpoint.code»}"/>
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.file.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.file.«endpoint.code»}"/>
			
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.password.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.password.«endpoint.code»}"/>
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.file.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.file.«endpoint.code»}"/>
			
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.password.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.password.«endpoint.code»}"/>
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.file.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.file.«endpoint.code»}"/>
			
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.password.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.password.«endpoint.code»}"/>
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.properties" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.file.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.file.«endpoint.code»}"/>

			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio.toLowerCase()»Cxf.xml" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.alias.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.alias.«endpoint.code»}"/>
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio.toLowerCase()»Cxf.xml" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.alias.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.alias.«endpoint.code»}"/>
			<replace file="${conf}/web/ws/«impl.provides.codServizio.toLowerCase()»/WEB-INF/«impl.provides.codServizio.toLowerCase()»Cxf.xml" token="@«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.alias.«endpoint.code»@" value="${«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.alias.«endpoint.code»}"/>
		«ENDFOREACH»
	    «ENDIF»
	    «ENDLET»
	    «ENDIF»
	    «ENDFOREACH»
	  
		<!-- Gestione replace delle variabile d'ambiente create dal generatore -->
		«IF targetPlatform.code == TargetPlatformCodes::JBoss43»
		<!-- JBoss replacements -->
		<replace dir="${temp}/conf/ear/">
			<include name="jboss-app.xml" />
			<replacefilter token="@context-root@" value="${war-file-name}" />
			<replacefilter token="@ear-file-name@" value="${ear-file-name}" />
		</replace>
		«ENDIF»

		«EXPAND varSubstForRC FOREACH getAllResourceConnectors()-»

		«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID("build.environment-config")»
		<!-- gestire qui i  replace delle proprie variabili d'ambiente -->
		«ENDPROTECT»
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all"
	        description="Esegue il packaging di ogni componente del prodotto">
		<antcall target="package-ear" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-ear                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-ear"
            depends="environment-recreate, environment-config, compile-all, package-commons-jar, package-all-wsclientlibs-jars,
                     package-all-ws-wars"
            description="costruisce l&apos;ear">

		<!-- librerie infrastrutturali o client di servizi fruiti -->
		<copy todir="${temp}/${target}/${earLib}">
			<fileset dir="${lib}" includes="${ear-libs-filter} ${ear-custom-libs-filter}«IF serviceimplementations.select(si|si.implCartridge!=null && si.implCartridge.metaType==FlowModelImplCartridge).size>0-» ${svcflow-libs}«ENDIF-»" />
			<fileset dir="${build}/archives/${target}" includes="*common.jar" />
		</copy>

		<ear appxml="${temp}/conf/ear/application.xml"
		     destfile="${build}/archives/${target}/${ear-file-name}.ear">
			<fileset dir="${build}/archives/${target}" includes="*.jar,*.war" excludes="*client*.jar,*common.jar" />
			<fileset dir="${temp}/${target}">
				<include name="**/*" />
			</fileset>
			«IF targetPlatform.code == TargetPlatformCodes::WLS92-»
			<metainf dir="${temp}/conf/ear/" includes="weblogic-application.xml" />
			«ELSEIF targetPlatform.code == TargetPlatformCodes::JBoss43-»
			<metainf dir="${temp}/conf/ear/" includes="jboss-app.xml" />
			«ENDIF-»
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="Appl-Version" value="${version}" />
			</manifest>
		</ear>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all-ws-wars                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all-ws-wars"
	        description="Costruisce i war di tutti i web services">
		«FOREACH serviceimplementations AS currSrvImpl-»
			«LET currSrvImpl.provides.bindings.typeSelect(WSBinding).first() AS ws-»
				«IF ws != null-»
		<!-- richiamo costruzione war ws servizio «currSrvImpl.provides.codServizio» -->
		<antcall target="_package-ws-war">
			<param name="component.name" value="«codComponente.toLowerCase()»"/>
			<param name="service.name" value="«removeSeparator(currSrvImpl.provides.codServizio)»"/>
			<param name="binding.code" value="«ws.codBinding.toLowerCase()»"/>
			<param name="service.type" value="«currSrvImpl.provides.serviceType.toString().toLowerCase()»"/>
			<param name="service.ver" value="«currSrvImpl.provides.versione»" />
		</antcall>
				«ENDIF-»
			«ENDLET-»
		«ENDFOREACH-»
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: _package-ws-war                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_package-ws-war"
	        description="Costruisce il war per un singolo web service">
		<!-- prende in input i parametri: component.name, service.name, binding.code, service.type, service.ver (deve essere a 2 cifre!!!) -->

        <if>
 			<equals arg1="${service.type}" arg2="orch" />
	 		<then>
				<copy todir="${build}/classes" overwrite="true" flatten="true">
					<fileset dir="${temp}/conf/orchestrator/descriptor/${service.name}" includes="**/*.xml"></fileset>
					<fileset dir="${temp}/conf/pd/${service.name}" includes="**/*.xml"></fileset>
					<fileset dir="${temp}/conf/ws/${service.name}" includes="**/*.xml"></fileset>
				</copy>
				<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
				     webxml="${conf}/web/${binding.code}/${service.name}/WEB-INF/web.xml"
				     roundup="false">
					<webinf dir="${conf}/web/${binding.code}/${service.name}/WEB-INF/"
					        includes="*.xml" />
					<classes dir="${build}/classes">
						<include name="«getOrganizationNamePathPrefix()»/*/«codComponente.toLowerCase()»/business/${service.name}/**"/>
						<include name="«getOrganizationNamePathPrefix()»/*/«codComponente.toLowerCase()»/integration/${service.name}/**"/>
						<include name="*.xml"/>
					</classes>
					<lib dir="${lib}" includes="*" excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}«IF serviceimplementations.select(si|si.implCartridge!=null && si.implCartridge.metaType==FlowModelImplCartridge).size>0-», ${svcflow-libs}«ENDIF-»" />
					<lib dir="${build}/archives/${target}/" includes="«codComponente.toLowerCase()»-${service.name}-client-${service.ver}.0.jar" />
				</war>
				<delete>
					<fileset dir="${build}/classes">
						<include name="*.xml"/>
					</fileset>
				</delete>
			</then>
			<else>
				<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
				     webxml="${conf}/web/${binding.code}/${service.name}/WEB-INF/web.xml"
				     roundup="false">
					<webinf dir="${conf}/web/${binding.code}/${service.name}/WEB-INF/">
						<include name="*.xml" />
						<include name="*.properties" />
					</webinf>
					<classes dir="${build}/classes">
						<include name="«getOrganizationNamePathPrefix()»/*/«codComponente.toLowerCase()»/business/${service.name}/**"/>
						<include name="«getOrganizationNamePathPrefix()»/*/«codComponente.toLowerCase()»/integration/${service.name}/**"/>
					</classes>
					<lib dir="${lib}" includes="*" excludes="${war-exclude-libs-filter}, ${war-exclude-custom-libs-filter}" />
					<lib dir="${build}/archives/${target}/" includes="«codComponente.toLowerCase()»-${service.name}-client-${service.ver}.0.jar" />
				</war>
			</else>
		</if>

	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-all-wsclientlibs-jars                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-all-wsclientlibs-jars"
	        description="Costruisce tutti i jar delle librerie client CXF per ogni servizio">
		«FOREACH getProvidedServices() AS sd-»
		<!-- costruzione delle librerie client per il servizio «sd.codServizio» -->
		<antcall target="_package-wsclientlibs-jar">
			<param name="service.name" value="«removeSeparator(sd.codServizio)»" />
			<param name="service.ver" value="«sd.versione»" />
		</antcall>
		«ENDFOREACH-»
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: _package-wsclientlibs-jar                          # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_package-wsclientlibs-jar"
	        description="Costruisce il jar delle librerie client CXF per un singolo servizio">
		<!-- prende come parametro il codice servizio service.name e la versione service.ver (deve essere a 2 cifre!!!) -->
		<jar destfile="${build}/archives/${target}/«codComponente.toLowerCase()»-${service.name}-client-${service.ver}.0.jar"
		     basedir="${build}/classes"
		     includes="«getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/dto/${service.name}/**,
		               «getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/exception/${service.name}/**,
		               «getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/interfacews/${service.name}/**">
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [PKG]: package-commons-jar                                # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="package-commons-jar" description="Genera il jar per le classi comuni.">
		<jar destfile="${build}/archives/${target}/«this.codComponente»-common.jar"
		     basedir="${build}/classes"
		     includes="«getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/business/**,
		               «getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/integration/**,
		               «getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/util/**">
			«FOREACH getProvidedServices() AS sd-»
			<exclude name="«getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/business/«removeSeparator(sd.codServizio)»/**" />
			<exclude name="«getOrganizationNamePathPrefix()»/«codProdotto.toLowerCase()»/«codComponente.toLowerCase()»/integration/«removeSeparator(sd.codServizio)»/**" />
			«ENDFOREACH-»
		</jar>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-all                                        # -->
	<!-- ############################################################# -->
	<!-- nota: non cancella la directory "dist" appositamente: v. STDMDD-495.
	per ripulire anche la "dist" richiamare esplicitamente il target "clean-dist" -->
	<!-- -->
	<target name="clean-all" description="Rimuove tutte le cartelle temporanee."
	        depends="clean-archives, clean-cache, clean-classes, clean-javadoc, clean-jsp, clean-temp" />

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-cache                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-cache"
	        description="Rimuove la cartella di cache di Ivy e la lib.">
		<delete dir="${build}/cache" failonerror="no" />
		<delete dir="${lib}" failonerror="no" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-temp                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-temp"
	        description="Rimuove la cartella dei files temporanei di build.">
		<delete dir="${temp}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-archives                                  # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-archives"
	        description="Rimuove la cartella degli archivi (war, ear, ...).">
		<delete dir="${build}/archives" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-dist                                       # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-dist"
	        description="Rimuove la cartella delle distribuzioni.">
		<delete dir="${dist}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-classes                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-classes"
	        description="Rimuove la cartella dei sorgenti compilati.">
		<delete dir="${build}/classes" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-javadoc                                    # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-javadoc"
	        description="Rimuove la cartella temporanea dei javadoc.">
		<delete dir="${build}/javadoc" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: clean-jsp                                        # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="clean-jsp"
	        description="Rimuove la cartella temporanea delle jsp compilate.">
	<delete dir="${build}/jsp" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # [CLEAN]: _clean-web-inf                                   # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="_clean-web-inf"
	        description="Rimuove il contenuto di lib e classes della
	                     web application (per run locali).">
		<delete dir="${srcweb}/WEB-INF/classes" />
		<delete dir="${srcweb}/WEB-INF/lib" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about                                             # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about" description="Visualizza l'elenco dei target pubblici dello script.">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: about-custom                                      # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="about-custom"
	        description="Visualizza l'elenco di tutti i target,
	                     pubblici e privati
	                     (equivalente a 'ant -projecthelp')" >

		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<!-- -->
	<!-- ############################################################# -->
	<!-- # Target: show-vars                                         # -->
	<!-- ############################################################# -->
	<!-- -->
	<target name="show-vars" depends="init"
	        description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************" />
		<echo message="********  ${componente} environment  *******" />
		<echo message="*****************************************" />
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************" />
		<echo message="********    java properties      ********" />
		<echo message="*****************************************" />
		<echoproperties prefix="java."/>
	</target>


	<taskdef resource="net/sf/antcontrib/antlib.xml"/>

	«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID(codComponente+"build.extratargets")»
	<!-- inserire qui eventuali target extra -->
	«ENDPROTECT»

</project>
«ENDFILE»
«ENDDEFINE»

«REM»Sostituzione delle variabili: ResourceConnector non definito«ENDREM»
«DEFINE varSubstForRC FOR ResourceConnector»
«ENDDEFINE»

«REM»Sostituzione delle variabili: PDPAServiceConnector«ENDREM»
«DEFINE varSubstForRC FOR PDPAServiceConnector»
<replace dir="${temp}/conf/pd" token="«getPAURLPlaceHolder(serviceDef)»"  value="${«getPAURLVar(serviceDef)»}"/>
«IF serviceDef.authLevel!=AuthLevelEnum::A0-»
<replace dir="${temp}/conf/pd" token="«getCsiAuthCredentialsPlaceHolder(serviceDef)»"  value="${«getCsiAuthCredentialsVar(serviceDef)»}"/>
«ENDIF-»
«ENDDEFINE»

«DEFINE varSubstForRC FOR RPCWebServiceConnector»
<replace dir="${temp}/conf/ws" token="«getWSURLPlaceHolder(serviceDef)»"  value="${«getWSURLVar(serviceDef)»}"/>
«IF serviceDef.authLevel!=AuthLevelEnum::A0-»
<replace dir="${temp}/conf/ws" token="«getWSUsernamePlaceHolder(serviceDef)»"  value="${«getWSUsernameVar(serviceDef)»}"/>
<replace dir="${temp}/conf/ws" token="«getWSPasswordPlaceHolder(serviceDef)»"  value="${«getWSPasswordVar(serviceDef)»}"/>
«ENDIF-»
«IF binding.channelSecurityLevel!=ChannelSecurityLevelEnum::C0-»
<replace dir="${temp}/conf/ws" token="«getWSTruststorePathPlaceHolder(serviceDef)»"  value="${«getWSTruststorePathVar(serviceDef)»}"/>
<replace dir="${temp}/conf/ws" token="«getWSTruststorePasswordPlaceHolder(serviceDef)»"  value="${«getWSTruststorePasswordVar(serviceDef)»}"/>
«IF binding.channelSecurityLevel==ChannelSecurityLevelEnum::C2-»
<replace dir="${temp}/conf/ws" token="«getWSKeyststorePathPlaceHolder(serviceDef)»"  value="${«getWSKeyststorePathVar(serviceDef)»}"/>
<replace dir="${temp}/conf/ws" token="«getWSKeystorePasswordPlaceHolder(serviceDef)»"  value="${«getWSKeystorePasswordVar(serviceDef)»}"/>
«ENDIF-»
«ENDIF-»
«ENDDEFINE»


«REM»
«DEFINE buildJavadocXmlFile FOR SOABEModel»
«FILE "buildfiles/build.javadoc.xml"»
«ENDFILE»
«ENDDEFINE»
«ENDREM»


«REM»
*******************************************************
creazione del build.properties richiamato dal build ANT
*******************************************************
«ENDREM»
«DEFINE buildproperties  FOR SOABEModel»
	«EXPAND buildPropertiesFile FOR this»
	«EXPAND buildPropertiesTemplateFile FOR this»
«ENDDEFINE»

«REM»«ENDREM»
«DEFINE buildPropertiesFile FOR SOABEModel»
«FILE "buildfiles/build.properties"»##############################################################################
# Build.properties
##############################################################################
# - Generato da SERVICEGEN.CXF, versione «getPluginVersion()»

# - [Definizione del Prodotto] -----------------------------------------------
  prodotto    = «codProdotto»
  contesto    = «codComponente»
  componente  = «codComponente»
  webapp      = ${contesto}
  version     = «versioneComponente»

# - [Definizione dei files di output] ----------------------------------------
  ear-file-name  = ${componente}srv
  dist-file-name = ${componente}srv-${version}
  war-file-name  = ${contesto}

# - [Cartelle di build] ------------------------------------------------------
  integration = integration
  lib         = ${basedir}/lib
  build       = ${basedir}/build
  src         = ${basedir}/src
  srcweb      = ${src}/web/${webapp}
  srcjaws     = ${src}/web/${jawsapp}
  conf        = ${basedir}/conf
  dist        = ${basedir}/dist
  docs        = ${basedir}/docs
  temp        = ${build}/temp

# - [ear-libs-filter] --------------------------------------------------------
# Questo filtro viene utilizzato per definire la lista dei JAR(s) che devono
# essere inclusi all'interno dell'EAR prodotto.
# ----------------------------------------------------------------------------
  ear-libs-filter = spring-aop-2.5.6.jar,                  \
                    spring-beans-2.5.6.jar,                \
                    spring-context-2.5.6.jar,              \
                    spring-context-support-2.5.6.jar,      \
                    spring-core-2.5.6.jar,                 \
                    spring-jdbc-2.5.6.jar,                 \
                    spring-tx-2.5.6.jar,                   \
                    spring-web-2.5.6.jar,                  \
                    aopalliance-1.0.jar,                   \
                    commons-logging-1.1.1.jar

«IF serviceimplementations.select(si|si.implCartridge!=null && si.implCartridge.metaType==FlowModelImplCartridge).size>0-»
# - [svcflow-libs] --------------------------------------------------------
# Questo filtro viene utilizzato per definire la lista dei JAR(s) che devono
# essere inclusi nel caso di servizi orchestrati
# ----------------------------------------------------------------------------
  svcflow-libs = svcflow-1.2.1.jar,                       \
                 oscore-2.2.5.jar,                        \
                 osworkflow-2.8.0.jar,                    \
                 propertyset-1.4.jar
«ENDIF-»

# - [ear-custom-libs-filter] -------------------------------------------------
# Questo filter viene utilizzato per definire JAR aggiuntivi che devono
# essere inclusi all'interno dell'EAR prodotto.
«PROTECT CSTART '##' CEND '##' ID getRegionUID("ear-custom-libs-filter")»
ear-custom-libs-filter =

«ENDPROTECT»

# - [war-exclude-libs-filter] ------------------------------------------------
# Questo filtro viene utilizzato per definire la lista dei JAR(s) *NON* devono
# venire inclusi all'interno del WAR.
# ----------------------------------------------------------------------------
«REM»DIFFERENZIARE WEBLOGIC-JBOSS«ENDREM»
  war-exclude-libs-filter = servlet*.jar,                  \
                            csi-tools*.jar,                \
                            log4j*.jar,                    \
                            ejb*.jar,                      \
                            spring*.jar,                   \
                            aopalliance*.jar,              \
                            «getAppServerLib(this)»*.jar«IF targetPlatform.code == TargetPlatformCodes::JBoss43-», \
                            weblogic-7*.jar,               \
                            weblogic-9*.jar                \
                            «ENDIF-»

# - [war-exclude-custom-libs-filter] ------------------------------------------------
# Questo filtro viene utilizzato per definire la lista dei JAR(s) *NON* devono
# venire inclusi all'interno del WAR.
# ----------------------------------------------------------------------------
«PROTECT CSTART '##' CEND '##' ID getRegionUID("war-exclude-custom-libs-filter")»
war-exclude-custom-libs-filter =

«ENDPROTECT»


# ----------------------------------------------------------------------------
  package.prefix = «getOrganizationNamePkgPrefix()».${prodotto}.${componente}

 «REM»DIFFERENZIZIONE WEBLOGIC-JBOSS«ENDREM»
«EXPAND appServerConfigurationBuildProperties FOR this»
«ENDFILE»
«ENDDEFINE»


«REM»Build properties: configurazione del server«ENDREM»
«DEFINE appServerConfigurationBuildProperties FOR SOABEModel»
«IF this.targetPlatform.code == TargetPlatformCodes::JBoss43 -»
# - [Configurazione del Server (JBoss)] --------------------------------------
  server = jboss
  earLib = lib
«ELSEIF this.targetPlatform.code == TargetPlatformCodes::WLS92 -»
# - [Configurazione del Server (WebLogic)] -----------------------------------
  server = weblogic
  earLib = APP-INF/lib
«ENDIF-»
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE buildPropertiesTemplateFile FOR SOABEModel»
«FILE "buildfiles/env_template.properties"»####################################################
# «codProdotto» - «codComponente»                  #
# ==========                                       #
# Configurazione di ambiente: <ambiente>           #
####################################################


«LET getAllResourceConnectors() AS allRC-»
	«EXPAND envVarDefs FOREACH allRC-»
«ENDLET-»
# Configurazione WS-Security
 «FOREACH this.serviceimplementations AS impl-»
«IF !impl.provides.bindings.isEmpty-»
«LET (WSBinding)impl.provides.bindings.get(0) AS wsBinding-»	
«IF !wsBinding.endpoints.isEmpty-»
«FOREACH ((WSBinding)wsBinding).endpoints AS endpoint-»
#Configurazione Signature EndPoint «endpoint.code»
# password per l'accesso al keystore
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.password.«endpoint.code» = 
# alias da utilizzare per il recupero della chiave privata del mittente (server)
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.alias.«endpoint.code» =
# keystore da utilizzare
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ks.file.«endpoint.code» =

# password per l'accesso al truststore
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.password.«endpoint.code» = 
# alias da utilizzare per il recupero della chiave privata del mittente (server)
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.alias.«endpoint.code» =
# trustore da utilizzare
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».ts.file.«endpoint.code» =




#Configurazione Encryption EndPoint «endpoint.code»
# password per l'accesso al keystore
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.password.«endpoint.code» = 
# keystore da utilizzare
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.file.«endpoint.code» =
# alias da utilizzare per il recupero della chiave privata del mittente (server)
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».encrypt.alias.«endpoint.code» =

# password per l'accesso al truststore
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.password.«endpoint.code» = 
# truststore da utilizzare
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.file.«endpoint.code» =
# alias da utilizzare per il recupero della chiave privata del mittente (server)
«impl.provides.codServizio»«endpoint.code.toFirstUpper()».decrypt.alias.«endpoint.code» =

«ENDFOREACH»
«ENDIF»    
«ENDLET»
«ENDIF»
«ENDFOREACH»
«ENDFILE»
«ENDDEFINE»


«REM»Variabili per un generico ResourceConnector«ENDREM»
«DEFINE envVarDefs FOR ResourceConnector»
«ENDDEFINE»

«REM»Variabili per un PDPAServiceConnector (delego al template di Servicegen CSI)«ENDREM»
«DEFINE envVarDefs FOR PDPAServiceConnector»
	«EXPAND template::buildfiles::envVarDefs FOR this»
«ENDDEFINE»

«REM»Variabili per un RPCWebServiceConnector (wscall)«ENDREM»
«DEFINE envVarDefs FOR RPCWebServiceConnector»
################################################################################
# variabili d'ambiente necessarie per la configurazione del RPCWebServiceConnector
# codice: «code»
# prodotto: «this.serviceDef.codProdotto»
# componente: «this.serviceDef.codComponente»
# codice servizio: «this.serviceDef.codServizio» V. «serviceDef.versione»
# binding: «binding.codBinding»
################################################################################

# url di connessione al servizio
«getWSURLVar(serviceDef)» = <inserire l'url di esposizione del web service>
«IF serviceDef.authLevel!=AuthLevelEnum::A0-»

# credenziali di autenticazione
«getWSUsernameVar(serviceDef)»=<username>
«getWSPasswordVar(serviceDef)»=<passwd>
«ENDIF-»
«IF binding.channelSecurityLevel!=ChannelSecurityLevelEnum::C0-»

# securizzazione del canale SSL
«getWSTruststorePathVar(serviceDef)»=<TruststorePath>
«getWSTruststorePasswordVar(serviceDef)»=<TruststorePassword>
«IF binding.channelSecurityLevel==ChannelSecurityLevelEnum::C2-»
«getWSKeyststorePathVar(serviceDef)»=<KeyststorePath>
«getWSKeystorePasswordVar(serviceDef)»=<KeystorePassword>
«ENDIF-»
«ENDIF-»
«ENDDEFINE»


«REM»
****************************************
creazione del file di configurazione IVY
****************************************
«ENDREM»

«DEFINE ivyfiles FOR SOABEModel»
«FILE "buildfiles/ivy.xml"»<ivy-module version="1.0">
	<info organisation="csipiemonte" module="«codComponente.toLowerCase()»" />
	<dependencies>

		<!-- librerie per il logging applicativo e la misurazione
		     delle performance. Nota: la piattaforma jboss impone l'utilizzo della
		     versione 1.2.14.
		-->
		<dependency org="apache" name="log4j" rev="1.2.14">
			<artifact name="log4j-1.2.14" type="jar" />
		</dependency>

		<dependency org="csipiemonte" name="util-perf" rev="1.0.0">
			<artifact name="util-perf-1.0.0" type="jar" />
		</dependency>

		<dependency org="apache" name="commons-logging" rev="1.1.1">
			<artifact name="commons-logging-1.1.1" type="jar" />
		</dependency>


		<!-- Spring 2.5.6 (CXF 2.2.12 dependency) -->
		<dependency org="others" name="spring" rev="2.5.6">
			<artifact name="aopalliance-1.0" type="jar" />
			<artifact name="spring-aop-2.5.6" type="jar" />
			<artifact name="spring-beans-2.5.6" type="jar" />
			<artifact name="spring-context-2.5.6" type="jar" />
			<artifact name="spring-context-support-2.5.6" type="jar" />
			<artifact name="spring-core-2.5.6" type="jar" />
			<artifact name="spring-jdbc-2.5.6" type="jar" />
			<artifact name="spring-tx-2.5.6" type="jar" />
			<artifact name="spring-web-2.5.6" type="jar" />
		</dependency>


		<!--
		BASE CXF DEPENDENCIES
		-->

		<dependency org="apache" name="geronimo-activation" rev="1.1" />
		<dependency org="apache" name="geronimo-annotation" rev="1.0" />
		<dependency org="apache" name="geronimo-javamail" rev="1.4">
			<artifact name="geronimo-javamail_1.4_spec-1.6" type="jar" />
		</dependency>
		<dependency org="apache" name="geronimo-jaxws" rev="2.1" />
		<dependency org="apache" name="geronimo-servlet" rev="2.5" />
		<dependency org="apache" name="geronimo-ws" rev="2.0" />

        <dependency org="others" name="wsdl4j" rev="1.6.2" />
        <dependency org="others" name="xml-resolver" rev="1.2" />
        <dependency org="others" name="xmlschema" rev="1.4.7" />

        <dependency org="sun" name="jaxb" rev="2.1">
            <artifact name="jaxb-api-2.1" type="jar" />
        </dependency>

        <dependency org="sun" name="jaxb" rev="2.1.13">
            <artifact name="jaxb-impl-2.1.13" type="jar" />
        </dependency>

         <dependency org="others" name="asm" rev="2.2.3">
            <artifact name="asm-2.2.3" type="jar" />
        </dependency>

		«IF this.targetPlatform.code == TargetPlatformCodes::WLS92»
        <!-- Dipendenze richieste da CXF 2.2.12 su BEA WL 9.2.2 -->
        <dependency org="apache" name="geronimo-stax" rev="1.0" />
        <dependency org="others" name="wstx-asl" rev="3.2.9" />
        «ENDIF»

		<!-- Customizzazione librerie CXF [vedere http://jiradsp.csi.it:8081/browse/STDSA-307 -->
        <dependency org="csipiemonte" name="cxf" rev="2.2.12" transitive="false" />


		«IF serviceimplementations.select(si|si.implCartridge!=null && si.implCartridge.metaType==FlowModelImplCartridge).size>0»
		<!--
		SERVIZIO ORCHESTRATO: DIPENDENZE NECESSARIE
		-->

	    <!-- dipendenze per svcflow 1.2.1 -->
	    <dependency org="csipiemonte" name="svcflow" rev="1.2.1">
	    	<artifact name="svcflow-1.2.1" type="jar" />
	    </dependency>

		<!-- librerie Core di C.S.I -->
		<dependency org="csipiemonte" name="csi" rev="1.4.5">
			<artifact name="csi-apachesoap-1.4.5" type="jar" />
			<artifact name="csi-core-1.4.5" type="jar" />
			<artifact name="csi-ejb-1.4.5" type="jar" />
			<artifact name="csi-ejb-weblogic-1.4.5" type="jar" />
			<artifact name="csi-rmi-1.4.5" type="jar" />
			<artifact name="csi-stadapter-1.4.5" type="jar" />
			<artifact name="csi-tools-1.4.5" type="jar" />
		</dependency>

	    <!-- librerie necessarie per i binding WSFAD -->
	    <dependency org="csipiemonte" name="wsadp" rev="2.0.2">
	    	<artifact name="wsadp-2.0.2" type="jar" />
	    </dependency>

		«IF this.targetPlatform.code==TargetPlatformCodes::JBoss43-»
		<!-- librerie necessarie per la connessione a servizi su WLS92 -->
		<dependency org="csipiemonte" name="weblogic-client" rev="3.0.0">
			<artifact name="weblogic-client-3.0.0" type="jar" />
		</dependency>
		«ENDIF-»

		<!-- librerie per l'implementazione di monitoraggio e diagnostica -->
		<dependency org="csipiemonte" name="coop-diag" rev="1.2.1" transitive="false">
			<artifact name="coop-diag-1.2.1" type="jar" />
		</dependency>
		
	    <!-- librerie necessarie se si attiva il supporto coop trace -->
	    <dependency org="csipiemonte" name="coop-trace" rev="1.2.0">
	    	<artifact name="coop-trace-1.2.0" type="jar" />
	    </dependency>

		«LET getAllResourceConnectors(this) AS allResConn-»

		«IF allResConn.select(rc|rc.metaType==PDPAServiceConnector).size>0-»
		«FOREACH allResConn.select(rc|rc.metaType==PDPAServiceConnector) AS currPDPARC-»
		«EXPAND template::buildfiles::pdpaIvyDependency FOR (PDPAServiceConnector)currPDPARC-»
		«ENDFOREACH-»
		«ENDIF-»

		«IF allResConn.select(rc|rc.metaType==RPCWebServiceConnector).size>0-»
		«FOREACH allResConn.select(rc|rc.metaType==RPCWebServiceConnector) AS currRPCWSC-»
	    «EXPAND wsIvyDependency FOR (RPCWebServiceConnector)currRPCWSC-»
	    «ENDFOREACH-»
		«ENDIF-»
		«ENDLET-»
		«ENDIF-»
		
		«IF !serviceimplementations.select(e|!e.provides.bindings.isEmpty).isEmpty»
		<!-- librerie necessarie per la configurazione WS-Security -->
		<dependency org="sun" name="saaj" rev="1.3.2" />
		<dependency org="others" name="xmlsec" rev="1.4.4" />
		<dependency org="alfresco" name="wss4j" rev="1.5.10" />
		«ENDIF» 

		«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID("ivyExtraDependencies")»
		<!-- Inserire qui le dipendenze aggiuntive -->
		«ENDPROTECT»
		

		<!--
		CONFLICT RESOLVERS (must be the last directive)
		-->
        <conflict org="sun" module="saaj" manager="all" />
        <conflict org="sun" module="jaxb" manager="all" />

	</dependencies>

</ivy-module>
«ENDFILE»

«FILE "buildfiles/ivyconf.xml"»<ivysettings>
	<settings defaultCache="${basedir}/build/cache" defaultResolver="myUrlResolver"/>
	<resolvers>
		<url name="myUrlResolver">
			<artifact pattern="http://«getIvyRepositoryHost()»/java/[organisation]/[module]/[revision]/lib/[artifact].[type]" />
			<artifact pattern="http://«getIvyRepositoryHost()»/java/[organisation]/[module]/[revision]/conf/[artifact].[type]" />

			<artifact pattern="http://«getIvyRepositoryHost()»/java/[organisation]/[module]/lib/[artifact].[type]" />

			<ivy pattern="http://«getIvyRepositoryHost()»/java/[organisation]/[module]/[revision]/ivy-[module].xml" />
			<ivy pattern="http://«getIvyRepositoryHost()»/java/[organisation]/[module]/ivy-[module].xml" />
		</url>
	</resolvers>
</ivysettings>
«ENDFILE»

«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE wsIvyDependency FOR RPCWebServiceConnector»
		<!-- dipendenze necessarie per il RPCWebServiceConnector [«code»] -->
		«LET this.annotations.select(a|a.source=="appresources") AS allAppresAnnotations-»
		«FOREACH allAppresAnnotations AS currAppresAnnotation-»
		«LET currAppresAnnotation.details.select(ad|ad.key=="repart-position").first() AS repPosAD-»
		«IF repPosAD!=null-»
		<dependency org="«getRepartOrganization(repPosAD.value)»" name="«getRepartName(repPosAD.value)»" rev="«getRepartVer(repPosAD.value)»">
		«FOREACH currAppresAnnotation.details.select(ad|ad.key=="repart-artifact") AS repArtAD-»
		«IF repArtAD!=null-»
			<artifact name="«repArtAD.value»" type="jar" />
		«ENDIF-»
		«ENDFOREACH-»
		</dependency>
		«ENDIF-»
		«ENDLET-»
		«ENDFOREACH-»
		«ENDLET-»
«ENDDEFINE»



«REM»
**************************************************
creazione dei file 'about' previsto dagli standard
**************************************************
«ENDREM»
«DEFINE aboutfiles FOR SOABEModel»
	«EXPAND aboutFile FOR this»
	«EXPAND aboutCustomFile FOR this»
«ENDDEFINE»

«REM»FILE about.txt«ENDREM»
«DEFINE aboutFile FOR SOABEModel»
«FILE "buildfiles/about.txt"»

«ENDFILE»
«ENDDEFINE»

«REM»FILE aboutCustom.txt«ENDREM»
«DEFINE aboutCustomFile FOR SOABEModel»
«FILE "buildfiles/aboutCustom.txt"»

«ENDFILE»
«ENDDEFINE»


«REM»
****************************************
creazione del file env.properties
****************************************
«ENDREM»

«DEFINE buildEnvProperties FOR SOABEModel»
«FILE "buildfiles/env.properties"»
JAVA_HOME=jdk_1_5_0_11
JAVA_HOME_SERVER=jdk_1_5_0_11
JAVA_HOME_CLIENT=jdk_1_4_2_05
ANT_HOME=ant_1_6_2
IVY_VERSION=ivy_2_0_0
«ENDFILE»
«ENDDEFINE»

«DEFINE ksPropertiesFile(SOABEModel model) FOR ServiceDef»
«IF !this.bindings.isEmpty»
«LET (WSBinding)this.bindings.get(0) AS wsBinding-»	
«IF !wsBinding.endpoints.isEmpty-»
«FOREACH ((WSBinding)wsBinding).endpoints AS endpoint-»
«FILE getSpecificWarConfigRootDir("ws", removeSeparator(codServizio.toLowerCase()), model)+"/WEB-INF/"+this.codServizio+endpoint.code.toFirstUpper()+".ks.properties"»
org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
org.apache.ws.security.crypto.merlin.keystore.type=jks
org.apache.ws.security.crypto.merlin.keystore.password=@«this.codServizio»«endpoint.code.toFirstUpper()».ks.password.«endpoint.code»@
org.apache.ws.security.crypto.merlin.file=@«this.codServizio»«endpoint.code.toFirstUpper()».ks.file.«endpoint.code»@
«ENDFILE»
«ENDFOREACH»
«ENDIF»
«ENDLET»
«ENDIF»
«ENDDEFINE»

«DEFINE tsPropertiesFile(SOABEModel model) FOR ServiceDef»
«IF !this.bindings.isEmpty»
«LET (WSBinding)this.bindings.get(0) AS wsBinding-»	
«IF !wsBinding.endpoints.isEmpty-»
«FOREACH ((WSBinding)wsBinding).endpoints AS endpoint-»
«FILE getSpecificWarConfigRootDir("ws", removeSeparator(codServizio.toLowerCase()), model)+"/WEB-INF/"+this.codServizio+endpoint.code.toFirstUpper()+".ts.properties"»
org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
org.apache.ws.security.crypto.merlin.keystore.type=jks
org.apache.ws.security.crypto.merlin.keystore.password=@«this.codServizio»«endpoint.code.toFirstUpper()».ts.password.«endpoint.code»@
org.apache.ws.security.crypto.merlin.file=@«this.codServizio»«endpoint.code.toFirstUpper()».ts.file.«endpoint.code»@
«ENDFILE»
«ENDFOREACH»
«ENDIF»
«ENDLET»
«ENDIF»
«ENDDEFINE»

«DEFINE encryptPropertiesFile(SOABEModel model) FOR ServiceDef»
«IF !this.bindings.isEmpty»
«LET (WSBinding)this.bindings.get(0) AS wsBinding-»	
«IF !wsBinding.endpoints.isEmpty-»
«FOREACH ((WSBinding)wsBinding).endpoints AS endpoint-»
«FILE getSpecificWarConfigRootDir("ws", removeSeparator(codServizio.toLowerCase()), model)+"/WEB-INF/"+this.codServizio+endpoint.code.toFirstUpper()+".encrypt.properties"»
org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
org.apache.ws.security.crypto.merlin.keystore.type=jks
org.apache.ws.security.crypto.merlin.keystore.password=@«this.codServizio»«endpoint.code.toFirstUpper()».encrypt.password.«endpoint.code»@
org.apache.ws.security.crypto.merlin.file=@«this.codServizio»«endpoint.code.toFirstUpper()».encrypt.file.«endpoint.code»@
«ENDFILE»
«ENDFOREACH»
«ENDIF»
«ENDLET»
«ENDIF»
«ENDDEFINE»

«DEFINE decryptPropertiesFile(SOABEModel model) FOR ServiceDef»
«IF !this.bindings.isEmpty»
«LET (WSBinding)this.bindings.get(0) AS wsBinding-»	
«IF !wsBinding.endpoints.isEmpty-»
«FOREACH ((WSBinding)wsBinding).endpoints AS endpoint-»
«FILE getSpecificWarConfigRootDir("ws", removeSeparator(codServizio.toLowerCase()), model)+"/WEB-INF/"+this.codServizio+endpoint.code.toFirstUpper()+".decrypt.properties"»
org.apache.ws.security.crypto.provider=org.apache.ws.security.components.crypto.Merlin
org.apache.ws.security.crypto.merlin.keystore.type=jks
org.apache.ws.security.crypto.merlin.keystore.password=@«this.codServizio»«endpoint.code.toFirstUpper()».decrypt.password.«endpoint.code»@
org.apache.ws.security.crypto.merlin.file=@«this.codServizio»«endpoint.code.toFirstUpper()».decrypt.file.«endpoint.code»@
«ENDFILE»
«ENDFOREACH»
«ENDIF»
«ENDLET»
«ENDIF»
«ENDDEFINE»


